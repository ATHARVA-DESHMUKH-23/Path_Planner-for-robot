
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
000000e8 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000400 g       *ABS*	00000000 __flash_size
00000008 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
00000270 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
00000268 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
000000e8  w      .debug_info	00000000 .hidden path_planner.c.d5dde178
000002b0 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
00000294 g     F .text	0000001c memset
00000054 g     F .text	00000214 main
00000040 g       *ABS*	00000000 __ram_size
02000040 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
000002b0 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    04010113          	addi	x2,x2,64 # 2000040 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    2b000593          	addi	x11,x0,688
  1c:	    00000613          	addi	x12,x0,0
  20:	    250000ef          	jal	x1,270 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    260000ef          	jal	x1,294 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    228000ef          	jal	x1,268 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__ram_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###     0b01000000000000000000000000000000  // Node 31: connected to Node 30
     ### };
     ### 
     ###     #else
     ###         uint32_t *graph = (uint32_t *) 0x02000010;
     ###          *(graph + 0x00) = 0b00000000000000000000010001000010; // Node 0
  54:	             020007b7          	lui	x15,0x2000
     ###          *(graph + 0x01) = 0b00000000000000000000100000000101; // Node 1
  58:	             000016b7          	lui	x13,0x1
     ###          *(graph + 0x00) = 0b00000000000000000000010001000010; // Node 0
  5c:	             44200713          	addi	x14,x0,1090
  60:	             00e7a823          	sw	x14,16(x15) # 2000010 <__bss_end+0x10>
     ###          *(graph + 0x01) = 0b00000000000000000000100000000101; // Node 1
  64:	             80568713          	addi	x14,x13,-2043 # 805 <__flash_size+0x405>
  68:	             00e7aa23          	sw	x14,20(x15)
     ###          *(graph + 0x02) = 0b00000000000000000000000000111000; // Node 2
  6c:	             03800713          	addi	x14,x0,56
  70:	             00e7ac23          	sw	x14,24(x15)
     ###          *(graph + 0x03) = 0b00000000000000000000000000000100; // Node 3
  74:	             00400713          	addi	x14,x0,4
  78:	             00e7ae23          	sw	x14,28(x15)
     ###          *(graph + 0x04) = 0b00000000000000000000000000000100; // Node 0
  7c:	             02e7a023          	sw	x14,32(x15)
     ###          *(graph + 0x05) = 0b00000000000000000000000000000100; // Node 1
  80:	             02e7a223          	sw	x14,36(x15)
     ###          *(graph + 0x06) = 0b00000000000000000000001110000001; // Node 2
  84:	             38100713          	addi	x14,x0,897
  88:	             02e7a423          	sw	x14,40(x15)
     ###          *(graph + 0x07) = 0b00000000000000000000000001000000; // Node 3
  8c:	             04000713          	addi	x14,x0,64
  90:	             02e7a623          	sw	x14,44(x15)
     ###          *(graph + 0x08) = 0b00000000000000000000000001000000; // Node 0
  94:	             02e7a823          	sw	x14,48(x15)
     ###          *(graph + 0x09) = 0b00000000000000000000000001000000; // Node 1
  98:	             02e7aa23          	sw	x14,52(x15)
     ###          *(graph + 0x0a) = 0b00001101000000000000100000000001; // Node 2
  9c:	             0d001737          	lui	x14,0xd001
  a0:	             80170713          	addi	x14,x14,-2047 # d000801 <__global_pointer$+0xb000001>
  a4:	             02e7ac23          	sw	x14,56(x15)
     ###          *(graph + 0x0b) = 0b00000000000010000001010000000010; // Node 3
  a8:	             00081737          	lui	x14,0x81
  ac:	             40270713          	addi	x14,x14,1026 # 81402 <__flash_size+0x81002>
  b0:	             02e7ae23          	sw	x14,60(x15)
     ###          *(graph + 0x0c) = 0b00000000000000000110100000000000; // Node 0
  b4:	             00007737          	lui	x14,0x7
  b8:	             80070713          	addi	x14,x14,-2048 # 6800 <__flash_size+0x6400>
  bc:	             04e7a023          	sw	x14,64(x15)
     ###          *(graph + 0x0d) = 0b00000000000000000001000000000000; // Node 1
     ###          *(graph + 0x0e) = 0b00000000000000011001000000000000; // Node 2
  c0:	             00019737          	lui	x14,0x19
  c4:	             04e7a423          	sw	x14,72(x15)
     ###          *(graph + 0x0f) = 0b00000000000000000100000000000000; // Node 3
  c8:	             00004737          	lui	x14,0x4
  cc:	             04e7a623          	sw	x14,76(x15)
     ###          *(graph + 0x10) = 0b00000000000001100100000000000000; // Node 0
  d0:	             00064737          	lui	x14,0x64
  d4:	             04e7a823          	sw	x14,80(x15)
     ###          *(graph + 0x11) = 0b00000000000000010010000000000000; // Node 1
  d8:	             00012737          	lui	x14,0x12
  dc:	             04e7aa23          	sw	x14,84(x15)
     ###          *(graph + 0x12) = 0b00000000001010010000000000000000; // Node 2
  e0:	             00290737          	lui	x14,0x290
  e4:	             04e7ac23          	sw	x14,88(x15)
     ###          *(graph + 0x13) = 0b00000000000101000000100000000000; // Node 3
  e8:	             00141737          	lui	x14,0x141
  ec:	             80070713          	addi	x14,x14,-2048 # 140800 <__flash_size+0x140400>
  f0:	             04e7ae23          	sw	x14,92(x15)
     ###          *(graph + 0x14) = 0b00000000000010000000000000000000; // Node 0
  f4:	             00080737          	lui	x14,0x80
  f8:	             06e7a023          	sw	x14,96(x15)
     ###          *(graph + 0x15) = 0b00000000110001000000000000000000; // Node 1
  fc:	             00c40737          	lui	x14,0xc40
 100:	             06e7a223          	sw	x14,100(x15)
     ###          *(graph + 0x16) = 0b00000000001000000000000000000000; // Node 2
 104:	             00200737          	lui	x14,0x200
 108:	             06e7a423          	sw	x14,104(x15)
     ###          *(graph + 0x17) = 0b01000001001000000000000000000000; // Node 3
 10c:	             41200737          	lui	x14,0x41200
 110:	             06e7a623          	sw	x14,108(x15)
     ###          *(graph + 0x18) = 0b00000010100000000000010000000000; // Node 0
 114:	             02800737          	lui	x14,0x2800
 118:	             40070713          	addi	x14,x14,1024 # 2800400 <__global_pointer$+0x7ffc00>
 11c:	             06e7a823          	sw	x14,112(x15)
     ###          *(graph + 0x19) = 0b00000001000000000000000000000000; // Node 1
 120:	             01000737          	lui	x14,0x1000
 124:	             06e7aa23          	sw	x14,116(x15)
     ###          *(graph + 0x1a) = 0b00011000000000000000010000000000; // Node 2
 128:	             18000737          	lui	x14,0x18000
 12c:	             40070713          	addi	x14,x14,1024 # 18000400 <__global_pointer$+0x15fffc00>
 130:	             06e7ac23          	sw	x14,120(x15)
     ###          *(graph + 0x1b) = 0b00000100000000000000000000000000; // Node 3
 134:	             04000737          	lui	x14,0x4000
 138:	             06e7ae23          	sw	x14,124(x15)
     ###          *(graph + 0x1c) = 0b01100100000000000000000000000000; // Node 0
 13c:	             64000737          	lui	x14,0x64000
 140:	             08e7a023          	sw	x14,128(x15)
     ###          *(graph + 0x1d) = 0b00010000000000000000000000000000; // Node 1
 144:	             10000737          	lui	x14,0x10000
 148:	             08e7a223          	sw	x14,132(x15)
     ###          *(graph + 0x1e) = 0b10010000100000000000000000000000; // Node 2
 14c:	             90800737          	lui	x14,0x90800
 150:	             08e7a423          	sw	x14,136(x15)
     ###          *(graph + 0x1f) = 0b01000000000000000000000000000000; // Node 3
 154:	             40000737          	lui	x14,0x40000
     ###          *(graph + 0x0d) = 0b00000000000000000001000000000000; // Node 1
 158:	             04d7a223          	sw	x13,68(x15)
     ###          *(graph + 0x1f) = 0b01000000000000000000000000000000; // Node 3
 15c:	             08e7a623          	sw	x14,140(x15)
     ### 
     ###  uint8_t stack[20]; // Stack pointer to hold at most 20 nodes
     ###     uint32_t visited = 0; // Visited array as a single 32-bit integer
     ###     int top = -1; // Stack top pointer
     ### 
     ###     stack[++top] = START_POINT; // Push start node
 160:	             0007c703          	lbu	x14,0(x15)
     ### int main(int argc, char const *argv[]) {
 164:	             fc010113          	addi	x2,x2,-64
     ###     visited |= (1 << START_POINT); // Mark start node as visited
 168:	             00100613          	addi	x12,x0,1
     ###     stack[++top] = START_POINT; // Push start node
 16c:	             00e10623          	sb	x14,12(x2)
     ###     visited |= (1 << START_POINT); // Mark start node as visited
 170:	             0007c783          	lbu	x15,0(x15)
     ###     stack[++top] = START_POINT; // Push start node
 174:	             00000693          	addi	x13,x0,0
     ###     while (top >= 0) {
     ###         uint8_t node = stack[top];
     ###         if (idx == 0 || path_planned[idx - 1] != node) {
     ###             path_planned[idx++] = node; // Add to path
     ###         }
     ###         if (node == END_POINT) break; // Exit on reaching end node
 178:	             02000537          	lui	x10,0x2000
     ###     visited |= (1 << START_POINT); // Mark start node as visited
 17c:	             00f61633          	sll	x12,x12,x15
     ### 
     ###         bool has_unvisited = false;
     ###         for (uint8_t i = 0; i < V; i++) {
     ###             if ((graph[node] & (1 << i)) && !(visited & (1 << i))) {
 180:	             00100893          	addi	x17,x0,1
     ###     uint8_t idx = 0;
 184:	             00000793          	addi	x15,x0,0
     ###         for (uint8_t i = 0; i < V; i++) {
 188:	             02000313          	addi	x6,x0,32
     ###     while (top >= 0) {
 18c:	             fff00813          	addi	x16,x0,-1
     ###         uint8_t node = stack[top];
 190:	/----------> 04010713          	addi	x14,x2,64
 194:	|            00d70733          	add	x14,x14,x13
 198:	|            fcc74703          	lbu	x14,-52(x14) # 3fffffcc <__global_pointer$+0x3dfff7cc>
     ###         if (idx == 0 || path_planned[idx - 1] != node) {
 19c:	|            00078593          	addi	x11,x15,0
 1a0:	|        /-- 00078a63          	beq	x15,x0,1b4 <path_planner.c.d5dde178+0xcc>
 1a4:	|        |   04010e13          	addi	x28,x2,64
 1a8:	|        |   00fe0e33          	add	x28,x28,x15
 1ac:	|        |   fdfe4e03          	lbu	x28,-33(x28)
 1b0:	|     /--|-- 00ee0c63          	beq	x28,x14,1c8 <path_planner.c.d5dde178+0xe0>
     ###             path_planned[idx++] = node; // Add to path
 1b4:	|     |  \-> 04010e13          	addi	x28,x2,64
 1b8:	|     |      00178793          	addi	x15,x15,1
 1bc:	|     |      00be05b3          	add	x11,x28,x11
 1c0:	|     |      0ff7f793          	andi	x15,x15,255
 1c4:	|     |      fee58023          	sb	x14,-32(x11)
     ###         if (node == END_POINT) break; // Exit on reaching end node
 1c8:	|     \----> 00454583          	lbu	x11,4(x10) # 2000004 <__bss_end+0x4>
 1cc:	|            0ff5f593          	andi	x11,x11,255
 1d0:	|  /-------- 04e58e63          	beq	x11,x14,22c <path_planner.c.d5dde178+0x144>
     ###             if ((graph[node] & (1 << i)) && !(visited & (1 << i))) {
 1d4:	|  |         00271713          	slli	x14,x14,0x2
 1d8:	|  |         00e50733          	add	x14,x10,x14
 1dc:	|  |         01072e03          	lw	x28,16(x14)
 1e0:	|  |         00000713          	addi	x14,x0,0
 1e4:	|  |  /----> 00e895b3          	sll	x11,x17,x14
 1e8:	|  |  |      00be7f33          	and	x30,x28,x11
 1ec:	|  |  |      0ff77e93          	andi	x29,x14,255
 1f0:	|  |  |  /-- 020f0263          	beq	x30,x0,214 <path_planner.c.d5dde178+0x12c>
 1f4:	|  |  |  |   00c5ff33          	and	x30,x11,x12
 1f8:	|  |  |  +-- 000f1e63          	bne	x30,x0,214 <path_planner.c.d5dde178+0x12c>
     ###                 stack[++top] = i;
 1fc:	|  |  |  |   00168693          	addi	x13,x13,1
 200:	|  |  |  |   04010713          	addi	x14,x2,64
 204:	|  |  |  |   00d70733          	add	x14,x14,x13
 208:	|  |  |  |   fdd70623          	sb	x29,-52(x14)
     ###                 visited |= (1 << i);
 20c:	|  |  |  |   00b66633          	or	x12,x12,x11
     ###     while (top >= 0) {
 210:	+--|--|--|-- f81ff06f          	jal	x0,190 <path_planner.c.d5dde178+0xa8>
     ###         for (uint8_t i = 0; i < V; i++) {
 214:	|  |  |  \-> 00170713          	addi	x14,x14,1
 218:	|  |  \----- fc6716e3          	bne	x14,x6,1e4 <path_planner.c.d5dde178+0xfc>
     ###                 break;
     ###             }
     ###         }
     ###         if (!has_unvisited) {
     ###             top--; // Backtrack
     ###             idx--; // Remove from path
 21c:	|  |         fff78793          	addi	x15,x15,-1
     ###             top--; // Backtrack
 220:	|  |         fff68693          	addi	x13,x13,-1
     ###             idx--; // Remove from path
 224:	|  |         0ff7f793          	andi	x15,x15,255
     ###     while (top >= 0) {
 228:	\--|-------- f70694e3          	bne	x13,x16,190 <path_planner.c.d5dde178+0xa8>
     ###     }
     ### 
     ###     // ##############################################
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = 0; i < idx; ++i) {
 22c:	   \-------> 00000713          	addi	x14,x0,0
     ###         NODE_POINT = path_planned[i];
 230:	             020006b7          	lui	x13,0x2000
     ###     for (int i = 0; i < idx; ++i) {
 234:	      /--/-X 00f74e63          	blt	x14,x15,250 <path_planner.c.d5dde178+0x168>
     ###     }
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 238:	      |  |   020007b7          	lui	x15,0x2000
 23c:	      |  |   00100713          	addi	x14,x0,1
 240:	      |  |   00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 244:	      |  |   00000513          	addi	x10,x0,0
 248:	      |  |   04010113          	addi	x2,x2,64
 24c:	      |  |   00008067          	jalr	x0,0(x1)
     ###         NODE_POINT = path_planned[i];
 250:	      |  \-> 02010613          	addi	x12,x2,32
 254:	      |      00e60633          	add	x12,x12,x14
 258:	      |      00064603          	lbu	x12,0(x12)
     ###     for (int i = 0; i < idx; ++i) {
 25c:	      |      00170713          	addi	x14,x14,1
     ###         NODE_POINT = path_planned[i];
 260:	      |      00c68423          	sb	x12,8(x13) # 2000008 <__bss_end+0x8>
     ###     for (int i = 0; i < idx; ++i) {
 264:	      \----- fd1ff06f          	jal	x0,234 <path_planner.c.d5dde178+0x14c>

00000268 <_set_tls>:
 268:	00050213          	addi	x4,x10,0
 26c:	00008067          	jalr	x0,0(x1)

00000270 <memcpy>:
 270:	       00050313          	addi	x6,x10,0
 274:	/----- 00060e63          	beq	x12,x0,290 <memcpy+0x20>
 278:	|  /-> 00058383          	lb	x7,0(x11)
 27c:	|  |   00730023          	sb	x7,0(x6)
 280:	|  |   fff60613          	addi	x12,x12,-1
 284:	|  |   00130313          	addi	x6,x6,1
 288:	|  |   00158593          	addi	x11,x11,1
 28c:	|  \-- fe0616e3          	bne	x12,x0,278 <memcpy+0x8>
 290:	\----> 00008067          	jalr	x0,0(x1)

00000294 <memset>:
 294:	       00050313          	addi	x6,x10,0
 298:	/----- 00060a63          	beq	x12,x0,2ac <memset+0x18>
 29c:	|  /-> 00b30023          	sb	x11,0(x6)
 2a0:	|  |   fff60613          	addi	x12,x12,-1
 2a4:	|  |   00130313          	addi	x6,x6,1
 2a8:	|  \-- fe061ae3          	bne	x12,x0,29c <memset+0x8>
 2ac:	\----> 00008067          	jalr	x0,0(x1)
